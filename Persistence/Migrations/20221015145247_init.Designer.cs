// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221015145247_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("Domain.Employment.Employment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Employer")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employment");
                });

            modelBuilder.Entity("Domain.Experience.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("employmentPositionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("employmentPositionId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("Domain.Project.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkRepoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkWebsiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Domain.School.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("School");
                });

            modelBuilder.Entity("Domain.Shared.Reference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("employmentReferenceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("employmentReferenceId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("Domain.Shared.TextLocale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("courseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("experienceHeaderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("experienceSubheaderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("experienceTextId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("referenceRoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("schoolId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("skillTextId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("textId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("courseId");

                    b.HasIndex("experienceHeaderId");

                    b.HasIndex("experienceSubheaderId");

                    b.HasIndex("experienceTextId");

                    b.HasIndex("referenceRoleId");

                    b.HasIndex("schoolId");

                    b.HasIndex("skillTextId");

                    b.HasIndex("textId");

                    b.ToTable("TextLocale");
                });

            modelBuilder.Entity("Domain.Skill.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SvgUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Domain.Skill.SkillShort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SvgUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("projectFrameworkId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("projectLanguageId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("projectFrameworkId");

                    b.HasIndex("projectLanguageId");

                    b.ToTable("SkillShort");
                });

            modelBuilder.Entity("Domain.Experience.Experience", b =>
                {
                    b.HasOne("Domain.Employment.Employment", null)
                        .WithMany("Positions")
                        .HasForeignKey("employmentPositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Shared.Reference", b =>
                {
                    b.HasOne("Domain.Employment.Employment", null)
                        .WithMany("References")
                        .HasForeignKey("employmentReferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Shared.TextLocale", b =>
                {
                    b.HasOne("Domain.Project.Project", null)
                        .WithMany("Text")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Domain.School.School", null)
                        .WithMany("Course")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Experience.Experience", null)
                        .WithMany("Header")
                        .HasForeignKey("experienceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Experience.Experience", null)
                        .WithMany("Subheader")
                        .HasForeignKey("experienceSubheaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Experience.Experience", null)
                        .WithMany("Text")
                        .HasForeignKey("experienceTextId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Shared.Reference", null)
                        .WithMany("Role")
                        .HasForeignKey("referenceRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.School.School", null)
                        .WithMany("SchoolName")
                        .HasForeignKey("schoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Skill.Skill", null)
                        .WithMany("Text")
                        .HasForeignKey("skillTextId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.School.School", null)
                        .WithMany("Text")
                        .HasForeignKey("textId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Skill.SkillShort", b =>
                {
                    b.HasOne("Domain.Project.Project", null)
                        .WithMany("Frameworks")
                        .HasForeignKey("projectFrameworkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Project.Project", null)
                        .WithMany("Languages")
                        .HasForeignKey("projectLanguageId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Domain.Employment.Employment", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("References");
                });

            modelBuilder.Entity("Domain.Experience.Experience", b =>
                {
                    b.Navigation("Header");

                    b.Navigation("Subheader");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("Domain.Project.Project", b =>
                {
                    b.Navigation("Frameworks");

                    b.Navigation("Languages");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("Domain.School.School", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("SchoolName");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("Domain.Shared.Reference", b =>
                {
                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Skill.Skill", b =>
                {
                    b.Navigation("Text");
                });
#pragma warning restore 612, 618
        }
    }
}
